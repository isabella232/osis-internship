# Generated by Django 3.1.1 on 2020-11-30 16:17
from django.db import migrations, models
from django.db.migrations import RunPython


def clear_generalists(apps, schema_editor):
    InternshipMaster = apps.get_model('internship', 'InternshipMaster')

    InternshipMaster.objects.filter(
        masterallocation__specialty__acronym='MG',
        masterallocation__organization__isnull=True
    ).distinct().delete()

def clean_mails(apps, schema_editor):
    InternshipMaster = apps.get_model('internship', 'InternshipMaster')

    # clean multiple mails in field value to keep only one mail and move others to additional_mail
    for master in InternshipMaster.objects.all():
        if master.email:
            for delimiter in [';', ',']:
                split_to_additional_email(master.email, master, delimiter)


def split_to_additional_email(email, master, delimiter):
    if delimiter in email:
        emails = email.split(delimiter)
        person_email = emails[-1].strip()
        additional_emails = emails[:-1]
        master.email_additional = '; '.join(additional_emails)
        master.email_additional = master.email_additional.strip()
        master.email = person_email
        master.save()


class Migration(migrations.Migration):

    dependencies = [
        ('internship', '0090_masterallocation_uuid'),
    ]

    operations = [
        # add additional email field to ensure only one mail will be used for person
        migrations.AddField(
            model_name='internshipmaster',
            name='email_additional',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Additional email'),
        ),
        # clean mails
        migrations.RunPython(clear_generalists, RunPython.noop, elidable=True),
        migrations.RunPython(clean_mails, RunPython.noop, elidable=True),
    ]
