# Generated by Django 3.1.1 on 2020-11-30 16:17
import django.db.models.deletion
import uuid
from django.db import migrations, models
from django.db.migrations import RunPython
from django.db.models import Count, Value, CharField
from django.db.models.functions import Concat, Upper


def clean_mails(apps, schema_editor):
    InternshipMaster = apps.get_model('internship', 'InternshipMaster')

    # clean multiple mails in field value to keep only one mail and move others to additional_mail
    for master in InternshipMaster.objects.all():
        if master.person:
            email = master.person.email
            if ';' in email:
                emails = email.split(';')
                person_email = emails[-1].strip()
                additional_emails = emails[:-1]
                master.email_additional = '; '.join(additional_emails)
                master.email_additional = master.email_additional.strip()
                master.person.email = person_email
                master.person.save()
                master.save()


def clean_duplicates(apps, schema_editor):
    InternshipMaster = apps.get_model('internship', 'InternshipMaster')
    MasterAllocation = apps.get_model('internship', 'MasterAllocation')

    # get master duplicates concatenating full name + email + email_private
    master_duplicates = InternshipMaster.objects.values('first_name', 'last_name', 'email', 'email_private').annotate(
        fullname=Concat(
            Upper('first_name'), Value(' '), Upper('last_name'),
            Value(' - '), 'email', 'email_private', output_field=CharField()
        )
    ).annotate(
        count_fullname=Count('fullname')
    ).order_by('count_fullname').filter(count_fullname__gt=1)

    # retrieve all master's allocations into one instance of master and delete the others
    for duplicate in master_duplicates:
        duplicate_ids = InternshipMaster.objects.filter(
            first_name=duplicate['first_name'],
            last_name=duplicate['last_name'],
            email=duplicate['email'],
            email_private=duplicate['email_private']
        ).values_list('id', flat=True)
        last_id = duplicate_ids.last()
        MasterAllocation.objects.filter(master_id__in=duplicate_ids).update(master_id=last_id)
        to_delete_ids = duplicate_ids.exclude(id=last_id)
        InternshipMaster.objects.filter(id__in=to_delete_ids).delete()


def create_persons(apps, schema_editor):
    InternshipMaster = apps.get_model('internship', 'InternshipMaster')
    Person = apps.get_model('base', 'Person')
    for master in InternshipMaster.objects.all():
        email = master.email or master.email_private
        if email and not master.person:
            person_instance = Person.objects.create(
                uuid=uuid.uuid4(),
                last_name=master.last_name,
                first_name=master.first_name,
                gender=master.gender,
                email=email,
                phone=master.phone,
                phone_mobile=master.phone_mobile,
                birth_date=master.birth_date
            )
            master.person = person_instance
            master.save()


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0543_auto_20201120_1040'),
        ('internship', '0090_masterallocation_uuid'),
    ]

    operations = [
        # add additional email field to ensure only one mail will be used for person
        migrations.AddField(
            model_name='internshipmaster',
            name='email_additional',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Additional email'),
        ),
        # clean mails
        migrations.RunPython(clean_mails, RunPython.noop),
        # clean duplicates
        migrations.RunPython(clean_duplicates, RunPython.noop),
        # link to person fk
        migrations.AddField(
            model_name='internshipmaster',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.person'),
        ),
        # create persons based on data
        migrations.RunPython(create_persons, RunPython.noop),
        # remove fields that are available in Person table
        migrations.RemoveField(
            model_name='internshipmaster',
            name='birth_date',
        ),
        migrations.RemoveField(
            model_name='internshipmaster',
            name='email',
        ),
        migrations.RemoveField(
            model_name='internshipmaster',
            name='first_name',
        ),
        migrations.RemoveField(
            model_name='internshipmaster',
            name='gender',
        ),
        migrations.RemoveField(
            model_name='internshipmaster',
            name='last_name',
        ),
        migrations.RemoveField(
            model_name='internshipmaster',
            name='phone',
        ),
        migrations.RemoveField(
            model_name='internshipmaster',
            name='phone_mobile',
        ),
    ]
